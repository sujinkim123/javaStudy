/*
 *   1. 자바 실행
 *      원시소스 ================ 기계어 ====================== 실행
 *                    javac       .class     java (실행) => 인터프리터         
 *      =========
 *      (프로그래머 코딩)
 *      .java => 컴퓨터가 알 수 있는 언어가 아니라 프로그래머만 알 수 있는 언어
 *      => 배포 (일반 사용자) : .java(X) , .class(O)
 *      => 컴파일 : C, C#, C++, 파이썬, 자바(JDK)
 *      => 인터프리터 : 자바 (한줄씩 번역) => HTML
 *      ********** 컴파일 VS 인터프리터 (면접 : 30%)
 *      => 호환성(모든 운영체제 적용) , 흑화된 언어 (웹,모바일 => 코틀린(JVM))
 *                                      기계(하드웨어:C/C++)
 *                                      AI (데이터 수집, 분석, 통계) => 파이썬
 *      문법
 *        1) 자바언어 => 무조건 클래스 안에서 작업
 *           형식
 *                 package 자바파일이 있는 위치 => 폴더 (.)
 *                         java.util.Scanner => java폴더 (util폴더 => Scanner)
 *                 ***** 한번만 사용이 가능
 *                 다른 클래스를 읽어 온다
 *                 import 패키지명.클래스명 , 패키지명.* => 여러개 사용이 가능
 *                 public class ClassName {
 *                     ===========변수영역============
 *                           *** 클래스 전체에서 사용이 가능 (전역변수) => 다른 클래스에서도 사용이 가능
 *                                => 다른 클래스에서 접근은 가능 => 허용해야 접근이 가능하게 만든다
 *                                => 데이터 보호 (캡슐화) => 시큐어 코딩 (파밍)
 *                                => private
 *                           멤버변수 (프로그램에 사용하는 데이터를 저장하는 공간 (프로그램 종료시까지 유지) )
 *                           ========
 *                           = 클래스 객체마다 개별적으로 사용 (인스턴스 변수)
 *                           = 클래스 전체 사용변수 (공유변수) : static
 *                     
 *                     ===========메소드영역===========
 *                         *** 사용자 요청에 대한 처리 (사용자가 동작 : 메뉴 클릭, 버튼 클릭, 선택)
 *                             => 키보드 , 마우스
 *                         *** 영화 목록 , 영화 찾기 , 영화 추천 , 영화 예매 , 결제
 *                         *** for (int i=0 ....) => 지역변수 (메소드 안에서만 사용하는 변수) 
 *                     ===========생성자영역===========
 *                         *** 멤버변수 초기화
 *                         class Temp {
 *                             int a = 10; // 10 명시적 초기화
 *                             int b; // 0
 *                             String id; => 파일에서 읽기 , cookie에 읽기
 *                                           ============================== 구현
 *                                           클래스 영역 => 구현(X) , 무조건 선언
 *                             생성자() => 구현 후 초기화
 *                         } *** 만약에 없는 경우에는 컴파일러가 자동으로 생성
 *                     ================================
 *                 } 
 *                 ============> 재사용 (IS-A(상속), HAS-A(포함)***)
 *                                      ============
 *                                      수정해서 사용 (오버라이딩) ===> 여러개 형태로 기능 => 다형성
 *                                      새로운 기능 추가 (오버로딩)
 *                 =============> 데이터 보호 , 재사용 , 수정,추가(다형성)
 *                                ========================================> 객체지향 프로그램의 3대 요소 (유지보수)
 *                 
 *   2. 자바 => 기본 데이터형
 *              ============== 1byte , 2byte , 4byte , 8byte  ==> 필요한 데이터를 한번에 묶어서 저장(클래스)
 *              정수형 : int , long , (byte => 파일업로드, 다운로드)
 *              실수형 : double
 *              논리형 : boolean
 *              문자열 : String
 *   3. 연산자 =>
 *              증감연산자 (++, --) : 한개 증가, 한개 감소 => 반복문에서 주로 사용
 *              부정연산자 : true/false 사용이 가능 => 조건문에서 주로 사용
 *              형변환 연산자 : (데이터형) => 작은 데이터형(강제 형변환) , 큰 데이터형(자동 형변환)
 *                                                                         ========================= 연산자
 *              ============== 클래스 형변환 (상속, 포함)
 *              => 크기
 *                 byte < short , char < int < long < float < double
 *                 ====================
 *                 연산처리가 되면 => int 결과값
 *              산술연산자 : + , - , * , / , % => ( / : 정수/정수=정수 , 0으로 나눌 수 없다 , % : 남는 값이 왼쪽 부호)
 *              비교연산자 : 조건, 반복문의 조건 ==> true / false
 *                           == , != , < , > , <= , >= (숫자만 비교 가능)
 *                           문자열은 비교 할 수 없다 (equals(boolean) , compare(int))
 *              논리연산자 : 조건 (범위, 기간 => &&(포함) , ||(불포함))
 *                           *** 효율적인 연산 (최적화된 연산: 속도)
 *                           (조건) && (조건)
 *                           ======    =======
 *                         true/false true/false
 *                         ======================
 *                          => 두 개가 true => true
 *                          false       연산처리 하지 않는다
 *                          
 *                          (조건) || (조건)
 *                          ======    =======
 *                          true/false true/false
 *                          ======================
 *                          => 둘중에 한개가 true ==> true
 *                          true가    연산처리 하지 않는다
 *                          
 *                          ==> 속도(최적화, 퍼포먼스)
 *                          
 *              대입연산자 : = , +=(누적, 증가를 한 개 이상) , -=(감소를 한개 이상)
 *                           
 *              
 *              *** +
 *                 = 산술 연산
 *                 = 문자열 결합 => 뒤에 붙인다 , 앞에 붙인다
 *                                  7 + "7" => 77
 *                                  "7" + 7  => 77
 *                                  7 + 7 + "7"
 *                                  =====
 *                                    14  + "7" ===> 147
 *                                  "7" + 7 + 7
 *                                  ========
 *                                     "77"  + 7 ===> 777
 *              
 *   4. 제어문
 *          == 조건문 ( if , if ~ else )
 *             = 단일 조건문 : 독립적 실행
 *               if (조건문) {
 *                   실행문장 => 조건문이 true일 경우에 수행 , false이면 점프(if문을 건너뛴다)
 *               }
 *               => 로그인 , 로그아웃 , 아이디 중복 , 우편번호 검색 => 동 입력 ... 검색어 입력
 *               
 *               if (조건문) { ===> 조건문에 사용되는 연산자 (부정연산자, 비교연산자, 논리연산자) 
 *                                  String에서 지원하는 boolean 리턴형 => boolean equals() , startsWith, endsWith , contains 
 *                 조건이 true일 때 수행하는 문장
 *               } else {
 *                 조건이 false일 때 수행하는 문장  
 *               }
 *               
 *               === 별점처리 , 경우의 수가 여러개일때 = 처리후 결과값이 여러개 (로그인:ID, PWD, LOGIN)
 *                   메뉴처리
 *                   ==> 무조건 한 개의 조건만 수행
 *               if (조건문) {
 *                   조건이 true => 문장수행 => 종료
 *                   조건이 false
 *                            ↓
 *               } else if (조건문) {
 *                   조건이 true => 문장 수행 => 종료
 *                   조건이 false
 *                            ↓
 *               } else if (조건문) {
 *                   조건이 true => 문장 수행 => 종료
 *               } else {
 *                   해당 조건이 없는 경우 처리
 *               }
 *               
 *          == 반복문 ( for , while ) : 같은 내용 출력 , 같은 패턴일 경우
 *             1111 2222 3333 4444 5555 => 반복문 수행이 가능 (수열)
 *             123423453456677833457884 => 반복문 처리가 어렵다 => 문자열로 변경하여 처리
 *                    1      2      4
 *             for (초기값;조건식;증가식) {
 *                 실행문장 (반복) 3
 *             }
 *             1-2-3-4
 *               2-3-4
 *               2-3-4 => 2번 false이면 종료
 *               
 *               
 *             초기값 (1)
 *             while (조건문) { (2) // 반복횟수가 지정이 안된 경우 => 네트워크, 파일 입출력
 *                 실행문장 (3)
 *                 증가식 (4)
 *             }
 *             1-2-3-4
 *               2-3-4
 *               2-3-4
 *               2 => false가 되면 종료
 *               
 *          == 반복제어문 ( break ) 
 *             break => 제어문 종료 : 반복문, 선택문에서만 사용이 가능
 *             if (조건문)
 *               break; ==> 오류
 *               
 *             while () {
 *               if (조건문) 
 *                  break; => 정상수행
 *             }
 *             
 *             continue; => 이동
 *                       while => 조건식
 *                       for => 증가식
 *                       ==== 2차 for
 *                       
 *                       for() {
 *                       } 
 *                       ================================= 1차
 *                       오라클 => Order by (정렬) ==> index => INDEX_ASC()  INDEX_DESC()
 *                                                              ****
 *                                 Rank() Over()
 *                       for() {  ===> 정렬, 등수 ...
 *                         for() {
 *                         }
 *                       }
 *                       ================================== 2차
 *          
 *   5. 배열 : => 1차원 배열
 *             => 같은 데이터형만 묶어서 사용 , (클래스배열)
 *             => 연속적인 메모리 구조
 *             => 메모리 크기 고정 (단점) => 증가, 감소 어렵다
 *                => 증가 => 현재 배열보다 큰 배열 => 복사
 *                => 감소 => 현재 배열보다 작은 배열 => 복사
 *             => 참조 데이터형
 *                ==== 메모리 주소를 저장 (메모리 주소를 통해서 접근: 배열, 클래스) => 모든 변수, 배열, 클래스 => 주소 
 *                                                                                     포인터
 *                ==== 배열 : 인덱스 번호
 *                ==== 클래스 : . (주소 접근연산자)
 *             => 생성
 *                데이터형[] 배열명;(자바 권장)
 *                데이터형 배열명[];
 *             => 초기화
 *                데이터형[] 배열명 = {값....};
 *                데이터형[] 배열명 = new 데이터형[개수];
 *             => 값 변경
 *                인덱스 번호 이용해서 값 변경 ==> length-1 (0번부터 시작한다)
 *                int[] arr = {10, 20, 30, 40, 50};
 *                arr[0]=100
 *                arr[1]=200 => {100, 200, 30, 40, 50}
 *             => 출력
 *                for~each를 이용한다
 *                for (데이터형 변수명 : 배열명)
 *                     =============== 인덱스를 이용하는 것이 아니라 배열에 저장된 실제 값을 읽어 온다
 *                     
 *                for (int i : arr) 
 *                    ======= 100 , 200 , 30 , 40 , 50  ==> 클 수도 있다
 *                for (long l : arr) 
 *                    ======== float , double
 *                for (byte b : arr) ==> 오류 코드
 *   6. 메소드
 *         요청처리 , 기능처리
 *         핵심
 *            => 리턴형(처리 결과값) , 매개변수 (사용자가 보내준 데이터)
 *               사용자 데이터 첨부
 *           ====|    |============
 *                  |
 *                  요청에 대한 데이터를 가공
 *                  
 *           ==========|    |=
 *                       |
 *                       결과값
 *           1page에 대한 영화 목록을 보내달라
 *           =====        =========
 *           매개변수     결과값(리턴형) ========> 한글로 표현
 *           
 *           영화제목을 보내고 상세보기 요청
 *           ========          ========
 *           매개변수          결과값(리턴형) ======> 한글로 표현 => 배열
 *           
 *           = 처리방법
 *              메소드 자체에서 처리 ===============> void (데이터베이스 => 추가,수정,삭제)
 *              결과값을 주고 다른 클래스에서 처리 => 리턴형 (데이터베이스 목록 읽기, 상세보기...)
 *              
 *              리턴형      매개변수
 *                O            O    *********** 리턴형 메소드 (매개변수....){return 값;}
 *                                              String => String substring(int begin, int end)
 *                                                        String replace(char c1, char c2)
 *                O            X                리턴형 메소드(){return 값;}
 *                                                      => double random()
 *                                                      => String trim()
 *                X            O    *********** void 메소드(매개변수){} => return 생략(컴파일러가 자동 추가)
 *                =========================             => void println(String s) 
 *                                                         void main(String[] args)
 *                X            X   ===> 사용빈도가 거의 없다 void 메소드(){}
 *                                                      => void println() => 다음줄 출력
 *                
 *           ====> 1. 순서
 *           
 *           예)
 *               방 들어가기
 *               1) 방을 찾는다
 *               2) 인원 증가한다
 *               3) 화면을 대기실에서 방으로 이동한다
 *               4) 이미 들어와 있는 인원에게 개인정보를 보낸다
 *               5) 방에 입장한 메세지 보낸다
 *               
 *           ===> 호출 방식
 *                int add(int a, int b) {
 *                ===
 *                    return a+b;
 *                           === 동일해야 한다
 *                }
 *                
 *                호출시 => 메소드명(매개변수 실제값)
 *                          int a = add(10, 20)
 *                              = 10+20 ==========> a=30
 *                              
 *                          숫자는 같거나 큰것으로 받을 수 있다
 *                          => String, boolean => 같은 것으로 받는다
 *                          => Sysetm.out.println(add(10,20)); ===> 30
 *                                                =========== return값을 출력한다
 *                          => 메소드 선언시
 *                             리턴형 메소드명() {
 *                                 리턴형 메소드명() {
 *                                 }
 *                             }
 *                             =========================== 블록 (들여쓰기)
 *                             
 *            ====> 클래스 안에서 메소드
 *                  = 인스턴스 메소드 : 객체마다 각자 가지고 있는 메소드
 *                  = static 메소드 : 자동저장 => 공유  ==> 웹 (한글변환 => 공유), 데이터베이스 메소드
 *   ============================================================================================================
 *   7. 클래스 ****** 현재
 *   8. 예외처리
 *   9. 라이브러리
 *       = 문자열 관련 (String, StringBuffer, StringBuilder)
 *       = 컬렉션 (ArrayList, Vector, Map)
 *       = Object , IO , Date , Calendar , Wrapper
 *   =============================================================
 *   10. 오라클 연결
 *   11. 웹연결 => 웹사이트
 */

import java.util.Scanner;
// 문자열을 입력을 받아서 => 좌우 대칭 확인 (구글) => 코딩 테스트 (사이버다임)
public class 자바정리 {
	public static void main(String[] args) throws Exception { 
		
		/* 
		FileReader fr = new FileReader("c:\\javaDev\\news.txt");
		int i = 0;
//		String data = "";
		StringBuffer sb = new StringBuffer();
		while ((i=fr.read()) != -1) { // -1 종료 (파일 끝 => EOF) 
			sb.append(String.valueOf((char)i));
		}
		fr.close();
		System.out.println(sb.toString());
		*/
		
		Scanner stdIn = new Scanner(System.in);
		String data = "";
		while (true) {
			System.out.print("문자열 입력: ");
			data = stdIn.next(); // 6
			if (data.length()%2==0)
				break;
			else
				System.out.println("다시 입력하시오");
		}
		boolean bCheck = false;
		for (int i=0; i<data.length()/2; i++) {
			char f = data.charAt(i); // 0
			char l = data.charAt(data.length()-1-i); // 5
			if (f==l) {
				bCheck = true; 
			} else {
				bCheck = false;
				break;
			}
		}
		if (bCheck == true) {
			System.out.println("좌우 대칭입니다");
		} else {
			System.out.println("좌우 대칭이 아닙니다");
		}
	}
}